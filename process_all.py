# -*- coding: utf-8 -*-
"""process_all.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C8h7HDxZJjAnpOb3xPuXDbz0zuZ2Gtth
"""

import os
import getpass
from config import QUIXBUGS_PROGRAMS
from main import process_buggy_program

# Initialize Gemini LLM (Google Generative AI via LangChain)
from langchain_google_genai import ChatGoogleGenerativeAI

# Prompt for API key if not set in environment
if "GEMINI_API_KEY" not in os.environ:
    os.environ["GEMINI_API_KEY"] = getpass.getpass("Enter your Gemini API key: ")

# Create the LLM instance
gemini_llm = ChatGoogleGenerativeAI(
    model="gemini-2.0-flash",
    google_api_key=os.environ["GEMINI_API_KEY"],
    temperature=0.2
)

test_program = "bitcount"
result = process_buggy_program(test_program)

print(f"Program: {result['program_name']}")
print(f"Success: {result['success']}")

if result['success']:
    print(f"Defect Category: {result['defect_category']}")
    print(f"\nFixed Code:\n{result['fixed_code']}")
    save_fixed_code(result['program_name'], result['fixed_code'])
else:
    print(f"Error: {result.get('error', 'Unknown error')}")



import json
from tqdm import tqdm
import subprocess
from typing import List, Dict, Any

def process_all_programs() -> List[Dict[str, Any]]:
    """Process all QuixBugs programs through the pipeline"""
    results = []


    for program in tqdm(QUIXBUGS_PROGRAMS, desc="Processing Programs"):
        try:
            result = process_buggy_program(program)

            if result.get("success") and "fixed_code" in result:
                save_fixed_code(program, result["fixed_code"])
                #run_tester_for_program(program)
            success = result.get("success", False)
            print(f"[{program}] - {'SUCCESS' if success else 'FAILURE'}")

            results.append({
                "program_name": program,
                "success": result.get("success", False),
            })

        except Exception as e:
            results.append({
                "program_name": program,
                "success": False,
                "error": str(e)
            })

    return results


def calculate_metrics(results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Calculate basic success/failure metrics"""
    total_programs = len(results)
    successful_fixes = sum(1 for r in results if r.get("success"))
    failed_programs = total_programs - successful_fixes
    success_rate = (successful_fixes / total_programs) * 100 if total_programs > 0 else 0

    return {
        "total_programs": total_programs,
        "successful_fixes": successful_fixes,
        "failed_programs": failed_programs,
        "success_rate_percent": round(success_rate, 2),
    }


def main():
    results = process_all_programs()

    metrics = calculate_metrics(results)

    with open("quixbugs_results.json", "w") as f:
        json.dump({
            "metrics": metrics,
            "detailed_results": results
        }, f, indent=2)

    print(f"Programs Processed: {metrics['total_programs']}")
    print(f"Successful Fixes: {metrics['successful_fixes']} ({metrics['success_rate_percent']}%)")
    print(f"Failed Fixes: {metrics['failed_programs']}")


if __name__ == "__main__":
    main()