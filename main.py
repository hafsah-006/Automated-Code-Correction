# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15mWlOgCyeve1NBYm41QqK1IZQpT2JxrU
"""

from agents import AgentState
from workflow import create_code_correction_workflow
from save import save_fixed_code

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/RumbleJack56/Code-Refactoring-QuixBugs.git
# %cd Code-Refactoring-QuixBugs

def process_buggy_program(program_name: str) -> Dict[str, Any]:
    """Process a single buggy program through the multi-agent pipeline"""

    print(f"\n Starting processing for: {program_name}")

    initial_state = AgentState(
        program_name=program_name,
        buggy_code="",
        defect_category="",
        code_understanding="",
        fixed_code="",
        fix_explanation="",
        messages=[],
        current_step="initialized"
    )

    try:
        final_state = code_correction_graph.invoke(initial_state)

        print(f"Processing completed for {program_name}")

        return {
            "success": True,
            "program_name": program_name,
            "defect_category": final_state["defect_category"],
            "fixed_code": final_state["fixed_code"],
            "fix_explanation": final_state["fix_explanation"],
            "workflow_messages": final_state["messages"]
        }

    except Exception as e:
        print(f"Processing failed for {program_name}: {str(e)}")
        return {
            "success": False,
            "program_name": program_name,
            "error": str(e)
        }



print("Execution functions defined")

import os
import subprocess
import sys

FIXED_DIR = "fixed_programs"

def run_tester_on_all_fixed():
    for fname in os.listdir(FIXED_DIR):
        if fname.endswith(".py") and not fname.startswith('.'):
            program_name = fname[:-3]
            print(f"Running tester.py on {program_name}...")
            try:
                result = subprocess.run(
                    [sys.executable, "tester.py", program_name],
                    capture_output=True, text=True, check=True
                )
                print(result.stdout)
            except subprocess.CalledProcessError as e:
                print(f"Tester failed for {program_name}:\n{e.stderr}")

run_tester_on_all_fixed()

test_program = "bitcount"
result = process_buggy_program(test_program)

print(f"Program: {result['program_name']}")
print(f"Success: {result['success']}")

if result['success']:
    print(f"Defect Category: {result['defect_category']}")
    print(f"\nFixed Code:\n{result['fixed_code']}")
    save_fixed_code(result['program_name'], result['fixed_code'])
else:
    print(f"Error: {result.get('error', 'Unknown error')}")